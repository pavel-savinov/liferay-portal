/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.friendly.url.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.friendly.url.model.FriendlyURLMapping;
import com.liferay.friendly.url.model.FriendlyURLMappingModel;
import com.liferay.friendly.url.service.persistence.FriendlyURLMappingPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FriendlyURLMapping service. Represents a row in the &quot;FriendlyURLMapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FriendlyURLMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FriendlyURLMappingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FriendlyURLMappingImpl
 * @see FriendlyURLMapping
 * @see FriendlyURLMappingModel
 * @generated
 */
@ProviderType
public class FriendlyURLMappingModelImpl extends BaseModelImpl<FriendlyURLMapping>
	implements FriendlyURLMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a friendly url mapping model instance should use the {@link FriendlyURLMapping} interface instead.
	 */
	public static final String TABLE_NAME = "FriendlyURLMapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "friendlyURLId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("friendlyURLId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table FriendlyURLMapping (classNameId LONG not null,classPK LONG not null,friendlyURLId LONG,primary key (classNameId, classPK))";
	public static final String TABLE_SQL_DROP = "drop table FriendlyURLMapping";
	public static final String ORDER_BY_JPQL = " ORDER BY friendlyURLMapping.id.classNameId ASC, friendlyURLMapping.id.classPK ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FriendlyURLMapping.classNameId ASC, FriendlyURLMapping.classPK ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.friendly.url.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.friendly.url.model.FriendlyURLMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.friendly.url.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.friendly.url.model.FriendlyURLMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.friendly.url.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.friendly.url.model.FriendlyURLMapping"));

	public FriendlyURLMappingModelImpl() {
	}

	@Override
	public FriendlyURLMappingPK getPrimaryKey() {
		return new FriendlyURLMappingPK(_classNameId, _classPK);
	}

	@Override
	public void setPrimaryKey(FriendlyURLMappingPK primaryKey) {
		setClassNameId(primaryKey.classNameId);
		setClassPK(primaryKey.classPK);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new FriendlyURLMappingPK(_classNameId, _classPK);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((FriendlyURLMappingPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return FriendlyURLMapping.class;
	}

	@Override
	public String getModelClassName() {
		return FriendlyURLMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("friendlyURLId", getFriendlyURLId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Long friendlyURLId = (Long)attributes.get("friendlyURLId");

		if (friendlyURLId != null) {
			setFriendlyURLId(friendlyURLId);
		}
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@Override
	public long getFriendlyURLId() {
		return _friendlyURLId;
	}

	@Override
	public void setFriendlyURLId(long friendlyURLId) {
		_friendlyURLId = friendlyURLId;
	}

	@Override
	public FriendlyURLMapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FriendlyURLMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FriendlyURLMappingImpl friendlyURLMappingImpl = new FriendlyURLMappingImpl();

		friendlyURLMappingImpl.setClassNameId(getClassNameId());
		friendlyURLMappingImpl.setClassPK(getClassPK());
		friendlyURLMappingImpl.setFriendlyURLId(getFriendlyURLId());

		friendlyURLMappingImpl.resetOriginalValues();

		return friendlyURLMappingImpl;
	}

	@Override
	public int compareTo(FriendlyURLMapping friendlyURLMapping) {
		FriendlyURLMappingPK primaryKey = friendlyURLMapping.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FriendlyURLMapping)) {
			return false;
		}

		FriendlyURLMapping friendlyURLMapping = (FriendlyURLMapping)obj;

		FriendlyURLMappingPK primaryKey = friendlyURLMapping.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FriendlyURLMapping> toCacheModel() {
		FriendlyURLMappingCacheModel friendlyURLMappingCacheModel = new FriendlyURLMappingCacheModel();

		friendlyURLMappingCacheModel.friendlyURLMappingPK = getPrimaryKey();

		friendlyURLMappingCacheModel.classNameId = getClassNameId();

		friendlyURLMappingCacheModel.classPK = getClassPK();

		friendlyURLMappingCacheModel.friendlyURLId = getFriendlyURLId();

		return friendlyURLMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", friendlyURLId=");
		sb.append(getFriendlyURLId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.friendly.url.model.FriendlyURLMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>friendlyURLId</column-name><column-value><![CDATA[");
		sb.append(getFriendlyURLId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FriendlyURLMapping.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FriendlyURLMapping.class
		};
	private long _classNameId;
	private long _classPK;
	private long _friendlyURLId;
	private FriendlyURLMapping _escapedModel;
}
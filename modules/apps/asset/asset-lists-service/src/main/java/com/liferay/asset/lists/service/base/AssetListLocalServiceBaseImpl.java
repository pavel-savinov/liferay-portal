/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.asset.lists.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.asset.lists.exception.NoSuchAssetListException;
import com.liferay.asset.lists.model.AssetList;
import com.liferay.asset.lists.service.AssetListLocalService;
import com.liferay.asset.lists.service.persistence.AssetListPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the asset list local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.asset.lists.service.impl.AssetListLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.asset.lists.service.impl.AssetListLocalServiceImpl
 * @see com.liferay.asset.lists.service.AssetListLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AssetListLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements AssetListLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.asset.lists.service.AssetListLocalServiceUtil} to access the asset list local service.
	 */

	/**
	 * Adds the asset list to the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetList the asset list
	 * @return the asset list that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetList addAssetList(AssetList assetList) {
		assetList.setNew(true);

		return assetListPersistence.update(assetList);
	}

	/**
	 * Creates a new asset list with the primary key. Does not add the asset list to the database.
	 *
	 * @param assetListId the primary key for the new asset list
	 * @return the new asset list
	 */
	@Override
	@Transactional(enabled = false)
	public AssetList createAssetList(long assetListId) {
		return assetListPersistence.create(assetListId);
	}

	/**
	 * Deletes the asset list with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetListId the primary key of the asset list
	 * @return the asset list that was removed
	 * @throws NoSuchAssetListException
	 * @throws PortalException if a asset list with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetList deleteAssetList(long assetListId)
		throws NoSuchAssetListException, PortalException {
		return assetListPersistence.remove(assetListId);
	}

	/**
	 * Deletes the asset list from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetList the asset list
	 * @return the asset list that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetList deleteAssetList(AssetList assetList) {
		return assetListPersistence.remove(assetList);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AssetList.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return assetListPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.asset.lists.model.impl.AssetListModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return assetListPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.asset.lists.model.impl.AssetListModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return assetListPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return assetListPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return assetListPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AssetList fetchAssetList(long assetListId) {
		return assetListPersistence.fetchByPrimaryKey(assetListId);
	}

	/**
	 * Returns the asset list matching the UUID and group.
	 *
	 * @param uuid the asset list's UUID
	 * @param groupId the primary key of the group
	 * @return the matching asset list, or <code>null</code> if a matching asset list could not be found
	 */
	@Override
	public AssetList fetchAssetListByUuidAndGroupId(String uuid, long groupId) {
		return assetListPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the asset list with the primary key.
	 *
	 * @param assetListId the primary key of the asset list
	 * @return the asset list
	 * @throws PortalException if a asset list with the primary key could not be found
	 */
	@Override
	public AssetList getAssetList(long assetListId) throws PortalException {
		return assetListPersistence.findByPrimaryKey(assetListId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(assetListLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AssetList.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("assetListId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(assetListLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AssetList.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("assetListId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(assetListLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AssetList.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("assetListId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<AssetList>() {
				@Override
				public void performAction(AssetList assetList)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						assetList);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(AssetList.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return assetListLocalService.deleteAssetList((AssetList)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return assetListPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the asset lists matching the UUID and company.
	 *
	 * @param uuid the UUID of the asset lists
	 * @param companyId the primary key of the company
	 * @return the matching asset lists, or an empty list if no matches were found
	 */
	@Override
	public List<AssetList> getAssetListsByUuidAndCompanyId(String uuid,
		long companyId) {
		return assetListPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of asset lists matching the UUID and company.
	 *
	 * @param uuid the UUID of the asset lists
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of asset lists
	 * @param end the upper bound of the range of asset lists (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching asset lists, or an empty list if no matches were found
	 */
	@Override
	public List<AssetList> getAssetListsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<AssetList> orderByComparator) {
		return assetListPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the asset list matching the UUID and group.
	 *
	 * @param uuid the asset list's UUID
	 * @param groupId the primary key of the group
	 * @return the matching asset list
	 * @throws PortalException if a matching asset list could not be found
	 */
	@Override
	public AssetList getAssetListByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return assetListPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the asset lists.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.asset.lists.model.impl.AssetListModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of asset lists
	 * @param end the upper bound of the range of asset lists (not inclusive)
	 * @return the range of asset lists
	 */
	@Override
	public List<AssetList> getAssetLists(int start, int end) {
		return assetListPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of asset lists.
	 *
	 * @return the number of asset lists
	 */
	@Override
	public int getAssetListsCount() {
		return assetListPersistence.countAll();
	}

	/**
	 * Updates the asset list in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param assetList the asset list
	 * @return the asset list that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetList updateAssetList(AssetList assetList) {
		return assetListPersistence.update(assetList);
	}

	/**
	 * Returns the asset list local service.
	 *
	 * @return the asset list local service
	 */
	public AssetListLocalService getAssetListLocalService() {
		return assetListLocalService;
	}

	/**
	 * Sets the asset list local service.
	 *
	 * @param assetListLocalService the asset list local service
	 */
	public void setAssetListLocalService(
		AssetListLocalService assetListLocalService) {
		this.assetListLocalService = assetListLocalService;
	}

	/**
	 * Returns the asset list persistence.
	 *
	 * @return the asset list persistence
	 */
	public AssetListPersistence getAssetListPersistence() {
		return assetListPersistence;
	}

	/**
	 * Sets the asset list persistence.
	 *
	 * @param assetListPersistence the asset list persistence
	 */
	public void setAssetListPersistence(
		AssetListPersistence assetListPersistence) {
		this.assetListPersistence = assetListPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.asset.lists.model.AssetList",
			assetListLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.asset.lists.model.AssetList");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AssetListLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AssetList.class;
	}

	protected String getModelClassName() {
		return AssetList.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = assetListPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AssetListLocalService.class)
	protected AssetListLocalService assetListLocalService;
	@BeanReference(type = AssetListPersistence.class)
	protected AssetListPersistence assetListPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}
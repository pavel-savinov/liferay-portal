/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.layout.page.template.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.layout.page.template.model.LayoutPageTemplateVersion;
import com.liferay.layout.page.template.service.LayoutPageTemplateVersionLocalService;
import com.liferay.layout.page.template.service.persistence.LayoutPageTemplateVersionPersistence;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the layout page template version local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.layout.page.template.service.impl.LayoutPageTemplateVersionLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.layout.page.template.service.impl.LayoutPageTemplateVersionLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class LayoutPageTemplateVersionLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements LayoutPageTemplateVersionLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>LayoutPageTemplateVersionLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.layout.page.template.service.LayoutPageTemplateVersionLocalServiceUtil</code>.
	 */

	/**
	 * Adds the layout page template version to the database. Also notifies the appropriate model listeners.
	 *
	 * @param layoutPageTemplateVersion the layout page template version
	 * @return the layout page template version that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public LayoutPageTemplateVersion addLayoutPageTemplateVersion(
		LayoutPageTemplateVersion layoutPageTemplateVersion) {

		layoutPageTemplateVersion.setNew(true);

		return layoutPageTemplateVersionPersistence.update(
			layoutPageTemplateVersion);
	}

	/**
	 * Creates a new layout page template version with the primary key. Does not add the layout page template version to the database.
	 *
	 * @param layoutPageTemplateVersionId the primary key for the new layout page template version
	 * @return the new layout page template version
	 */
	@Override
	@Transactional(enabled = false)
	public LayoutPageTemplateVersion createLayoutPageTemplateVersion(
		long layoutPageTemplateVersionId) {

		return layoutPageTemplateVersionPersistence.create(
			layoutPageTemplateVersionId);
	}

	/**
	 * Deletes the layout page template version with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param layoutPageTemplateVersionId the primary key of the layout page template version
	 * @return the layout page template version that was removed
	 * @throws PortalException if a layout page template version with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public LayoutPageTemplateVersion deleteLayoutPageTemplateVersion(
			long layoutPageTemplateVersionId)
		throws PortalException {

		return layoutPageTemplateVersionPersistence.remove(
			layoutPageTemplateVersionId);
	}

	/**
	 * Deletes the layout page template version from the database. Also notifies the appropriate model listeners.
	 *
	 * @param layoutPageTemplateVersion the layout page template version
	 * @return the layout page template version that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public LayoutPageTemplateVersion deleteLayoutPageTemplateVersion(
		LayoutPageTemplateVersion layoutPageTemplateVersion) {

		return layoutPageTemplateVersionPersistence.remove(
			layoutPageTemplateVersion);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			LayoutPageTemplateVersion.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return layoutPageTemplateVersionPersistence.findWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.layout.page.template.model.impl.LayoutPageTemplateVersionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return layoutPageTemplateVersionPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.layout.page.template.model.impl.LayoutPageTemplateVersionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return layoutPageTemplateVersionPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return layoutPageTemplateVersionPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return layoutPageTemplateVersionPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public LayoutPageTemplateVersion fetchLayoutPageTemplateVersion(
		long layoutPageTemplateVersionId) {

		return layoutPageTemplateVersionPersistence.fetchByPrimaryKey(
			layoutPageTemplateVersionId);
	}

	/**
	 * Returns the layout page template version matching the UUID and group.
	 *
	 * @param uuid the layout page template version's UUID
	 * @param groupId the primary key of the group
	 * @return the matching layout page template version, or <code>null</code> if a matching layout page template version could not be found
	 */
	@Override
	public LayoutPageTemplateVersion
		fetchLayoutPageTemplateVersionByUuidAndGroupId(
			String uuid, long groupId) {

		return layoutPageTemplateVersionPersistence.fetchByUUID_G(
			uuid, groupId);
	}

	/**
	 * Returns the layout page template version with the primary key.
	 *
	 * @param layoutPageTemplateVersionId the primary key of the layout page template version
	 * @return the layout page template version
	 * @throws PortalException if a layout page template version with the primary key could not be found
	 */
	@Override
	public LayoutPageTemplateVersion getLayoutPageTemplateVersion(
			long layoutPageTemplateVersionId)
		throws PortalException {

		return layoutPageTemplateVersionPersistence.findByPrimaryKey(
			layoutPageTemplateVersionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			layoutPageTemplateVersionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(LayoutPageTemplateVersion.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"layoutPageTemplateVersionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			layoutPageTemplateVersionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(
			LayoutPageTemplateVersion.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"layoutPageTemplateVersionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			layoutPageTemplateVersionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(LayoutPageTemplateVersion.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"layoutPageTemplateVersionId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod
				<LayoutPageTemplateVersion>() {

				@Override
				public void performAction(
						LayoutPageTemplateVersion layoutPageTemplateVersion)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, layoutPageTemplateVersion);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(
					LayoutPageTemplateVersion.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return layoutPageTemplateVersionLocalService.
			deleteLayoutPageTemplateVersion(
				(LayoutPageTemplateVersion)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return layoutPageTemplateVersionPersistence.findByPrimaryKey(
			primaryKeyObj);
	}

	/**
	 * Returns all the layout page template versions matching the UUID and company.
	 *
	 * @param uuid the UUID of the layout page template versions
	 * @param companyId the primary key of the company
	 * @return the matching layout page template versions, or an empty list if no matches were found
	 */
	@Override
	public List<LayoutPageTemplateVersion>
		getLayoutPageTemplateVersionsByUuidAndCompanyId(
			String uuid, long companyId) {

		return layoutPageTemplateVersionPersistence.findByUuid_C(
			uuid, companyId);
	}

	/**
	 * Returns a range of layout page template versions matching the UUID and company.
	 *
	 * @param uuid the UUID of the layout page template versions
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of layout page template versions
	 * @param end the upper bound of the range of layout page template versions (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching layout page template versions, or an empty list if no matches were found
	 */
	@Override
	public List<LayoutPageTemplateVersion>
		getLayoutPageTemplateVersionsByUuidAndCompanyId(
			String uuid, long companyId, int start, int end,
			OrderByComparator<LayoutPageTemplateVersion> orderByComparator) {

		return layoutPageTemplateVersionPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the layout page template version matching the UUID and group.
	 *
	 * @param uuid the layout page template version's UUID
	 * @param groupId the primary key of the group
	 * @return the matching layout page template version
	 * @throws PortalException if a matching layout page template version could not be found
	 */
	@Override
	public LayoutPageTemplateVersion
			getLayoutPageTemplateVersionByUuidAndGroupId(
				String uuid, long groupId)
		throws PortalException {

		return layoutPageTemplateVersionPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the layout page template versions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.layout.page.template.model.impl.LayoutPageTemplateVersionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of layout page template versions
	 * @param end the upper bound of the range of layout page template versions (not inclusive)
	 * @return the range of layout page template versions
	 */
	@Override
	public List<LayoutPageTemplateVersion> getLayoutPageTemplateVersions(
		int start, int end) {

		return layoutPageTemplateVersionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of layout page template versions.
	 *
	 * @return the number of layout page template versions
	 */
	@Override
	public int getLayoutPageTemplateVersionsCount() {
		return layoutPageTemplateVersionPersistence.countAll();
	}

	/**
	 * Updates the layout page template version in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param layoutPageTemplateVersion the layout page template version
	 * @return the layout page template version that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public LayoutPageTemplateVersion updateLayoutPageTemplateVersion(
		LayoutPageTemplateVersion layoutPageTemplateVersion) {

		return layoutPageTemplateVersionPersistence.update(
			layoutPageTemplateVersion);
	}

	/**
	 * Returns the layout page template version local service.
	 *
	 * @return the layout page template version local service
	 */
	public LayoutPageTemplateVersionLocalService
		getLayoutPageTemplateVersionLocalService() {

		return layoutPageTemplateVersionLocalService;
	}

	/**
	 * Sets the layout page template version local service.
	 *
	 * @param layoutPageTemplateVersionLocalService the layout page template version local service
	 */
	public void setLayoutPageTemplateVersionLocalService(
		LayoutPageTemplateVersionLocalService
			layoutPageTemplateVersionLocalService) {

		this.layoutPageTemplateVersionLocalService =
			layoutPageTemplateVersionLocalService;
	}

	/**
	 * Returns the layout page template version persistence.
	 *
	 * @return the layout page template version persistence
	 */
	public LayoutPageTemplateVersionPersistence
		getLayoutPageTemplateVersionPersistence() {

		return layoutPageTemplateVersionPersistence;
	}

	/**
	 * Sets the layout page template version persistence.
	 *
	 * @param layoutPageTemplateVersionPersistence the layout page template version persistence
	 */
	public void setLayoutPageTemplateVersionPersistence(
		LayoutPageTemplateVersionPersistence
			layoutPageTemplateVersionPersistence) {

		this.layoutPageTemplateVersionPersistence =
			layoutPageTemplateVersionPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"com.liferay.layout.page.template.model.LayoutPageTemplateVersion",
			layoutPageTemplateVersionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.layout.page.template.model.LayoutPageTemplateVersion");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return LayoutPageTemplateVersionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return LayoutPageTemplateVersion.class;
	}

	protected String getModelClassName() {
		return LayoutPageTemplateVersion.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				layoutPageTemplateVersionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = LayoutPageTemplateVersionLocalService.class)
	protected LayoutPageTemplateVersionLocalService
		layoutPageTemplateVersionLocalService;

	@BeanReference(type = LayoutPageTemplateVersionPersistence.class)
	protected LayoutPageTemplateVersionPersistence
		layoutPageTemplateVersionPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}